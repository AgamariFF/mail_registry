const API_BASE_URL = '/mail'

async function loadLetters() {
    try {
        const response = await fetch(`${API_BASE_URL}/outgoing`);
        if (!response.ok) {
            throw new Error(`HTTP error! status : ${response.status}`);
        }
        const letters = await response.json();
        renderLetters(letters)
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∏—Å–µ–º:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∏—Å—å–º–∞');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∏—Å–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ
function renderLetters(letters) {
    const tbody = document.getElementById('lettersTable');
    
    if (letters.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="7">
                    <div class="empty-state">
                        <div>üì≠</div>
                        <h3>–ü–∏—Å—å–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                        <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</p>
                    </div>
                </td>
            </tr>
        `;
        return;
    }

    tbody.innerHTML = letters.map(letter => `
        <tr>
            <td><strong>${letter.internalNumber}</strong></td>
            <td>${formatDate(letter.registrationDate)}</td>
            <td>${letter.recipient}</td>
            <td title="${letter.subject}">${truncateText(letter.subject, 50)}</td>
            <td>${letter.executor}</td>
            <td>
                <div class="actions">
                    <button class="btn btn-download" onclick="downloadLetter(${letter.id})" ${!letter.hasFile ? 'disabled' : ''}>
                        üì• –°–∫–∞—á–∞—Ç—å
                    </button>
                    <button class="btn btn-edit" onclick="editLetter(${letter.id})">
                        ‚úèÔ∏è –†–µ–¥–∞–∫—Ç.
                    </button>
                    <button class="btn btn-view" onclick="viewLetter(${letter.id})">
                        üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä
                    </button>
                </div>
            </td>
        </tr>
    `).join('');
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function downloadLetter(id) {
    try {
        const response = await fetch(`${API_BASE_URL}/outgoing/${id}/download`);
        if (!response.ok) {
            throw new Error('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.style.display = 'none';
        a.href = url;
        a.download = `letter_${id}.pdf`; // –∏–ª–∏ –¥—Ä—É–≥–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª');
    }
}

async function viewLetter(id) {
    try {
        const response = await fetch(`${API_BASE_URL}/outgoing/${id}`);
        if (!response.ok) {
            throw new Error('–ü–∏—Å—å–º–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
        const letter = await response.json();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏
        showLetterDetails(letter);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∏—Å—å–º–∞:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞');
    }
}

function showLetterDetails(letter) {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <h2>–î–µ—Ç–∞–ª–∏ –ø–∏—Å—å–º–∞</h2>
                <button class="close-btn" onclick="this.parentElement.parentElement.remove()">&times;</button>
            </div>
            <div class="modal-body">
                <div class="detail-row">
                    <label>–ù–æ–º–µ—Ä:</label>
                    <span>${letter.internal_number}</span>
                </div>
                <div class="detail-row">
                    <label>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</label>
                    <span>${formatDate(letter.registration_date)}</span>
                </div>
                <div class="detail-row">
                    <label>–ê–¥—Ä–µ—Å–∞—Ç:</label>
                    <span>${letter.recipient}</span>
                </div>
                <div class="detail-row">
                    <label>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</label>
                    <span>${letter.executor}</span>
                </div>
                <div class="detail-row">
                    <label>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</label>
                    <span>${letter.subject}</span>
                </div>
                ${letter.file_path ? `
                <div class="detail-row">
                    <label>–§–∞–π–ª:</label>
                    <span>${letter.file_path}</span>
                </div>
                ` : ''}
            </div>
        </div>
    `;
    document.body.appendChild(modal);
}


function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU');
}

function truncateText(text, maxLength) {
    return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
}

function toggleLetterFields() {
    const letterType = document.getElementById('letterType').value;
    const outgoingFields = document.getElementById('outgoingFields');
    const incomingFields = document.getElementById('incomingFields');
    
    if (letterType === 'outgoing') {
        outgoingFields.style.display = 'block';
        incomingFields.style.display = 'none';
    } else if (letterType === 'incoming') {
        outgoingFields.style.display = 'none';
        incomingFields.style.display = 'block';
    } else {
        outgoingFields.style.display = 'none';
        incomingFields.style.display = 'none';
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
document.getElementById('addLetterForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const letterType = formData.get('type');
    
    try {
        let response;
        if (letterType === 'outgoing') {
            response = await fetch(`${API_BASE_URL}/outgoing`, {
                method: 'POST',
                body: formData
            });
        } else if (letterType === 'incoming') {
            response = await fetch(`${API_BASE_URL}/incoming`, {
                method: 'POST',
                body: formData
            });
        } else {
            alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∏—Å—å–º–∞');
            return;
        }

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∏—Å—å–º–∞');
        }

        const newLetter = await response.json();
        console.log('‚úÖ –ü–∏—Å—å–º–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ:', newLetter);
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        closeAddModal();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        showNotification('–ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!', 'success');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–∏—Å–µ–º
        loadLetters();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∏—Å—å–º–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∏—Å—å–º–∞: ' + error.message, 'error');
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.innerHTML = `
        <div class="notification-content">
            <span class="notification-message">${message}</span>
            <button class="notification-close" onclick="this.parentElement.parentElement.remove()">&times;</button>
        </div>
    `;
    
    document.body.appendChild(notification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (notification.parentElement) {
            notification.remove();
        }
    }, 5000);
}

// –û–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é addLetter
function addLetter() {
    openAddModal();
}